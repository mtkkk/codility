Algorithms

-Converter ArrayList para Array tipo primitivo
	myList.stream().mapToInt(Integer::valueOf).toArray();

-Converter lista de tipo primitivo para List<T>
	Arrays.asList(A);

-Adicionar um numero a uma lista e verificar se está na lista

	HashSet<Integer> dups = new HashSet<Integer>();
	if (dups.add(A[i])){}

-Preencher um array inteiro com um determinado valor
	
	Arrays.fill(A[], valor)



-Rotacionar um número inteiro
	
	// Rotate function to right rotate the number 
    static int Rotate(int n) 
    { 
        int rem = n % 10; // find unit place number 
        rem *= Math.pow(10, countDigits(n)); // to put unit place 
        // number as first digit. 
        n /= 10; // remove unit digit 
        n += rem; // add first digit to rest 
        return n; 
    } 		

    // Function to find total number of digits 
    static int countDigits(int n) 
    { 
        int digit = 0; 
        while ((n /= 10) > 0) 
            digit++; 
        return digit; 
    } 


-Guardando valores (ex: quantas vezes um numero apareceu no array)	
	Map<Integer,Integer> counter = new HashMap<Integer,Integer>();
	for(Entry<Integer,Integer> nOccurrences : counter.entrySet()){
	}


-Pegar o maior valor de uma collection
	-Lista
	int highest = Collections.max(collection);

	-Array de int
	int max = Arrays.stream(A).max().getAsInt();

*******************************************************************
*****************************SORTING*******************************
*******************************************************************	

-Bubble Sort
	for(int i = array.length-1 ; i >= 1 ; i--){
		for(int j = 0; j <= i-1 ; j++){
			if(array[j] > array[j+1]){
				swap(array,j,j+1);
			}
		}
	}



*******************************************************************
**************************MATH CONCEPTS****************************
*******************************************************************

-Maximum number of combinations
	->Unordered, no repetition
		n = array size
		r = numbers chosen (2 for pairs, 3 for triplets)
		n! / r!(n-r)!	=> 	
		maxCombinations = n * (n-1) / 2

-Descobrir quantidade de números divisíveis por K
	int lowerBound, int higherBound, int K
	(higherBound/K) - (lowerBound/K) + lowerBound % K == 0 ? 1 : 0


-Um número quando fatorizado pode ser representado por números primos e seus expoentes
	ex: 10 = 2^1 * 5^1
		30 = 2^1 * 3^1 * 5^1
		15 = 3^1 * 5^1
		75 = 3^1 * 5^2

	Para descobrir se os divisores primos são os mesmos
	1 - Tirar o GCD
	2 - Para cada numero, tirar o GCD novamente GCD(X,GCD(X,Y))
		2.1 - Se este GCD for 1 significa que não possui mais fator em comum
	3 - Após dividir pelo GCD tem que dar 1

	public static int solution(int[] A, int[] B){
		int count = 0;
	    for(int i = 0 ; i < A.length ; i++){
	    	if(hasSamePrimeDivisors(A[i],B[i])){
	    		count += 1;
	    	}   
	    }
	        
	    return count;
	}

	public static boolean hasSamePrimeDivisors(int x, int y) {
		
		int gcd_value = gcd(x,y);
		
		x = removeCommonPrimeDivisors(x, gcd_value);
		if(x != 1){
			return false;
		}
		y = removeCommonPrimeDivisors(y, gcd_value);
		
		return y==1;
	}

	public static int removeCommonPrimeDivisors(int x, int y){
		while (x != 1){
			int gcd_value = gcd(x,y);
			if(gcd_value == 1){
				break;
			}
			x /= gcd_value;
		}
		
		return x;
	}


	-Modulo (mod)
		-Quando um numero é menor que o mod, o resulto é o proprio numero
		-Se aplicar um mod X e depois aplicar um mod Y<X (contanto que X e Y sejam multiplos) o resultado do mod Y será o mesmo do mod X

*******************************************************************
**************************PRIME NUMBERS****************************
*******************************************************************	

-Achar todos os numeros primos 
	
	Preencher um array de boolean e ir "desmarcando(false)"	 aqueles que não são primos. 
	Algoritmo de Eratosthenes -> 
		boolean primeCheck[] = new boolean[N+1];
		Arrays.fill(primeCheck, true);
		for(int i = 2 ; i*i <= N ; i++){
			if(primeCheck[i]){ //Checks if hasnt been marked
				for(int j = i*2 ; j <= N ; j += i){
					primeCheck[j] = false;
				}
			}
		}

-Verificar se um número é primo

	public static boolean isPrime(int n) {
		if(n == 2){
			return true;
		} else if(n == 3){
			return true;
		} else if(n % 2 == 0){
			return false;
		} else if(n % 3 == 0){
			return false;
		}
		
		int i = 5;
		int w = 2;
		
		while(i*i <= n){
			if(n % i == 0){
				return false;
			}
			i+= w;
			w = 6 - w;
		}
		
		return true;
	}			

*******************************************************************
***************************GCD AND LCM*****************************
*******************************************************************	

NOTA*** GCD (Greatest Common Divisor) ou GCF(Greatest Common Factor) é o MDC(Máximo Divisor Comum)
		LCM (Least Common Multiple) é o MDC(Mínimo Múltiplo Comum)

-Euclidean Algorithm (GCD)
	public static int gcd(int a, int b){
		if(a % b == 0){
			return b;
		} else {
			return gcd(b, a % b);
		}
	}

-LCM
	int lcm = A*B / gcd(A,B);